<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1400.v7fd111b_ec82f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2184.v0b_358b_953e69"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2184.v0b_358b_953e69">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>RELEASE_BRANCH</name>
          <description>Enter the branch name to build</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3883.vb_3ff2a_e3eea_f">
    <script>pipeline {
    agent any
    
    environment {
        CODECOMMIT_REPO_URL = &apos;ssh://APKA47SOYMRPYLTDEO7T@git-codecommit.us-east-1.amazonaws.com/v1/repos/ncompasstv-api&apos;
        AWS_DEFAULT_REGION = &quot;${env.AWS_DEFAULT_REGION}&quot;
        AWS_ACCESS_KEY_ID = &quot;${env.AWS_ACCESS_KEY_ID}&quot;
        AWS_SECRET_ACCESS_KEY = &quot;${env.AWS_SECRET_ACCESS_KEY}&quot;
        PRODUCTION_BRANCH = &apos;production&apos;
        DEVELOPMENT_BRANCH = &apos;development&apos;
        STAGING_BRANCH = &apos;staging&apos;
        RELEASE_BRANCH = &quot;${params.RELEASE_BRANCH}&quot;
        //GIT_SSH_COMMAND = &quot;ssh -o StrictHostKeyChecking=no&quot;
        SSH_CREDENTIAL_ID = &quot;aws-codecommit-ssh&quot;
    }

    stages {
        stage(&apos;CHECKOUT&apos;) {
            steps {
                // Checkout the main branch
                script {
                    git branch: PRODUCTION_BRANCH, credentialsId: SSH_CREDENTIAL_ID, url: CODECOMMIT_REPO_URL
                }
                
                script {
                    git branch: STAGING_BRANCH, credentialsId: SSH_CREDENTIAL_ID, url: CODECOMMIT_REPO_URL
                }
                
                script {
                    git branch: DEVELOPMENT_BRANCH, credentialsId: SSH_CREDENTIAL_ID, url: CODECOMMIT_REPO_URL
                }
            }
        }
        
        stage(&apos;RELEASE BRANCH&apos;) {
            steps {
                // Create a new branch based on the main branch
                script {
                    try {
                        sh &quot;git checkout ${PRODUCTION_BRANCH}&quot;
                        sh &quot;git checkout -b ${RELEASE_BRANCH}&quot;
                        
                        sshagent(credentials: [&quot;${SSH_CREDENTIAL_ID}&quot;]) {
                            sh &quot;git push origin ${RELEASE_BRANCH}&quot;
                        }
                        
                    } catch (Exception mergeException) {

                        currentBuild.result = &apos;FAILURE&apos;
                        echo &quot;STAGE RELEASE BRANCH FAILED&quot;
                        
                    }
                    
                    
                }
            }
        }
        
        stage(&apos;MERGE TO DEV&apos;) {
            
            when {
                expression {
                    currentBuild.result != &apos;FAILURE&apos;
                }
            }
            
            steps {
                // Create a new branch based on the main branch
                script {
                    
                    try {
                        sh &quot;git checkout ${RELEASE_BRANCH}&quot;
                        
                        sh &quot;git merge --no-ff ${DEVELOPMENT_BRANCH}&quot;
                        
                    } catch (Exception mergeException) {
                        // Revert the merge
                        sh &quot;git reset --hard HEAD&quot;
                        
                        // Handle merge conflicts
                        echo &quot;Merge failed: ${mergeException}&quot;
                        currentBuild.result = &apos;FAILURE&apos;
                        echo &quot;MERGE TO DEV FAILED&quot;
                    }
                    
                    sshagent(credentials: [&quot;${SSH_CREDENTIAL_ID}&quot;]) {
                        sh &quot;git push --set-upstream origin ${RELEASE_BRANCH}&quot;
                    }
                    
                }
            }
        }
        
        stage(&apos;MERGE TO STG&apos;) {
            
            when {
                expression {
                    currentBuild.result != &apos;FAILURE&apos;
                }
            }
            
            steps {
                // Create a new branch based on the main branch
                script {
                    
                    try {
                        sh &quot;git checkout ${STAGING_BRANCH}&quot;
                        
                        sh &quot;git merge --no-ff ${RELEASE_BRANCH}&quot;
                        
                    } catch (Exception mergeException) {
                        
                        // Revert the merge
                        sh &quot;git reset --hard HEAD&quot;
                        
                        // Handle merge conflicts
                        echo &quot;Merge failed: ${mergeException}&quot;
                        currentBuild.result = &apos;FAILURE&apos;
                        echo &quot;MERGE TO STG FAILED&quot;
                    }
                    
                    sshagent(credentials: [&quot;${SSH_CREDENTIAL_ID}&quot;]) {
                        sh &quot;git push --set-upstream origin ${STAGING_BRANCH}&quot;
                    }
                    
                }
            }
        }
    }
    
    
    post {
        always {
            sh &quot;git checkout ${PRODUCTION_BRANCH}&quot;
            sh &quot;git branch -D ${RELEASE_BRANCH}&quot;
        }
        success {
            echo &apos;Deployment Done!&apos;
        }
        failure {
            echo &apos;Deployment failed!&apos;
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>