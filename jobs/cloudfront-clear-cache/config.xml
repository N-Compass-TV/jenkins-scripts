<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1426.v2ecb_a_a_42fd46">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2198.v41dd8ef6dd56"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2198.v41dd8ef6dd56">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3894.3896.vca_2c931e7935">
    <script>pipeline {
    agent any
    
    environment {
        AWS_CREDENTIALS_ID = &apos;aws-credentials&apos;
    }
    
    stages {
        
        stage(&apos;CLEAR CACHE&apos;) {
            steps {
                script {
                    
                        withCredentials([[
                            $class: &apos;AmazonWebServicesCredentialsBinding&apos;, 
                            credentialsId: AWS_CREDENTIALS_ID,
                            accessKeyVariable: &apos;AWS_ACCESS_KEY_ID&apos;,
                            secretKeyVariable: &apos;AWS_SECRET_ACCESS_KEY&apos;
                        ]]) {
                            sh &quot;&quot;&quot;
                                aws cloudfront create-invalidation \
                                    --distribution-id E2CKY769PXFXOQ \
                                    --path &apos;/*&apos;
                            &quot;&quot;&quot;
                        }
                }
            }
        }

    }
    
    post {
        success {
            echo &apos;Successfully Cleared!&apos;
        }
        failure {
            echo &apos;Failed!&apos;
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>